Name
Primary Skillset
Experience JavaScript

3:15 Tea (20 mins)
4:30 Lunch (45 mins)
5:15 Resume
6:45 Tea (20 mins)
8:30 Conclude
JavaScript
    Data Types
        number, string, boolean, object, undefined, function

    Language Constructs
        var, if else, switch case, for, while, try catch finally, function

    APIs
        Math, Array, Date, RegEx, Error, timer (setTimeout, clearTimeout, setInterval, clearInterval)

    Unique Aspects


Line Oriented
Procedural 
Object Based 
Object Oriented
Functional
    functions are first class citizens
    functions can be treated like data (object)
        functions can be created like objects
        functions can have attributes like objects
        functions can have methods like objects

        functions can be passed as arguments (like objects) to other functions (HOF)
        functions can be returned as a return value (like objects) from other functions (HOF)

    functions are 'callable' objects in javaScript

static
dynamic

class Employee{
    public int Id;
    public string Name;
    public decimal Salary;
}

Employee emp = new Employee();
emp.Id = 100
emp.Name = "Magesh"
emp.City = "Bangalore"


loosely typed

JavaScript is a functional, dynamic & loosely typed language (with support for objects)

function add(x,y){
    return x + y;
}

function add(x,y){
    if (typeof x !== 'number' || typeof y !== 'number' || arguments.length > 2)
        throw new Error('Invalid argument(s)!')
    return x + y;
}

add(10,20)
add(10, '20')
add(10, 'abc')
add([10,20], [30,40])
add([10,20], [30,'40'])
add([10,20], [30,'abc'])
add([10,20], [[30,'abc'],40])
add(function(){ return 10; }, function(){ return 20; })
add(function(){ return [10,20]}, function(){ return [[30,'abc'],40]})
add([function(){ return [10,20]}, function(){ return [[30,'abc'],40]}])
add(10)
add()
add(10,20,30,40,50) (variadic function)

implicit values in a function
    this
    arguments
        - array like object containing all the values passed to the function as arguments
            - length
            - indexer support
                arguments[0]
                arguments[1]
                etc

It DOES NOT matter where the function is OR who owns the function
What matters is HOW the function is invoked

Function invocation Patterns
    6 ways of invoking a function

    When a function is invoked as method of an object (obj)
        this -> obj

    When a function is invoked as a 'function'
        this -> global scope (window in browser)

    Using the 'call' method of the function

    Using the 'apply' method of the function